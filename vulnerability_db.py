class VulnerabilityDatabase:
    """Database of vulnerability information, prevention methods, and references"""
    
    def __init__(self):
        self.prevention_methods = {
            'sql_injection': """
**Prevention Methods for SQL Injection:**

1. **Use Parameterized Queries/Prepared Statements**
   - Always use parameterized queries instead of string concatenation
   - Example: `SELECT * FROM users WHERE id = ?` instead of `SELECT * FROM users WHERE id = '` + user_input + `'`

2. **Input Validation and Sanitization**
   - Validate all user inputs against expected patterns
   - Use allowlists instead of blocklists
   - Sanitize special characters

3. **Principle of Least Privilege**
   - Database accounts should have minimal necessary permissions
   - Don't use administrative accounts for application connections
   - Restrict database operations (SELECT, INSERT, UPDATE, DELETE)

4. **Stored Procedures**
   - Use stored procedures with proper input validation
   - Ensure stored procedures don't construct dynamic SQL

5. **Web Application Firewalls (WAF)**
   - Deploy WAF to filter malicious requests
   - Regular updates to detection rules

6. **Regular Security Testing**
   - Perform regular penetration testing
   - Use automated scanning tools
   - Code reviews focusing on database interactions
            """,
            
            'xss': """
**Prevention Methods for Cross-Site Scripting (XSS):**

1. **Output Encoding/Escaping**
   - Encode all user data before displaying in HTML
   - Use context-appropriate encoding (HTML, JavaScript, URL, CSS)
   - Never trust user input

2. **Content Security Policy (CSP)**
   - Implement strict CSP headers
   - Use nonce or hash-based CSP for inline scripts
   - Restrict script sources to trusted domains

3. **Input Validation**
   - Validate and sanitize all user inputs
   - Use allowlists for acceptable characters
   - Reject inputs containing script tags or JavaScript

4. **Use Security-Focused Frameworks**
   - Use frameworks that automatically handle XSS protection
   - Enable auto-escaping in template engines
   - Keep frameworks updated

5. **HTTP-Only Cookies**
   - Set HttpOnly flag on sensitive cookies
   - Use Secure flag for HTTPS-only cookies
   - Implement proper session management

6. **Regular Security Testing**
   - Test all input fields and parameters
   - Use automated XSS scanning tools
   - Perform manual testing with various payloads
            """,
            
            'idor': """
**Prevention Methods for Insecure Direct Object References (IDOR):**

1. **Implement Proper Access Controls**
   - Verify user permissions for every object access
   - Use role-based access control (RBAC)
   - Check authorization at the application layer

2. **Use Indirect Reference Maps**
   - Use session-specific reference maps
   - Map user-specific references to actual objects
   - Don't expose internal object IDs directly

3. **Validate User Permissions**
   - Check if the user owns or has access to the requested object
   - Implement object-level permissions
   - Log and monitor access attempts

4. **Use UUIDs Instead of Sequential IDs**
   - Replace predictable IDs with UUIDs
   - Make object references non-guessable
   - Implement additional access validation

5. **Server-Side Authorization**
   - Never rely on client-side access controls
   - Validate every request on the server
   - Implement defense in depth

6. **Regular Security Audits**
   - Review access control implementations
   - Test with different user roles
   - Monitor for unauthorized access attempts
            """,
            
            'security_headers': """
**Security Headers Best Practices:**

1. **Content-Security-Policy (CSP)**
   - Prevents XSS and data injection attacks
   - Example: `Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'`

2. **X-Frame-Options**
   - Prevents clickjacking attacks
   - Example: `X-Frame-Options: DENY` or `X-Frame-Options: SAMEORIGIN`

3. **X-XSS-Protection**
   - Enables browser XSS filtering
   - Example: `X-XSS-Protection: 1; mode=block`

4. **X-Content-Type-Options**
   - Prevents MIME type sniffing
   - Example: `X-Content-Type-Options: nosniff`

5. **Strict-Transport-Security (HSTS)**
   - Enforces HTTPS connections
   - Example: `Strict-Transport-Security: max-age=31536000; includeSubDomains`

6. **Referrer-Policy**
   - Controls referrer information
   - Example: `Referrer-Policy: strict-origin-when-cross-origin`
            """
        }
        
        self.references = {
            'sql_injection': [
                "OWASP SQL Injection Prevention Cheat Sheet",
                "NIST SP 800-53 - Security Controls for Federal Information Systems",
                "CWE-89: Improper Neutralization of Special Elements used in an SQL Command",
                "OWASP Top 10 2021 - A03 Injection"
            ],
            
            'cross-site_scripting_(xss)': [
                "OWASP XSS Prevention Cheat Sheet",
                "CWE-79: Cross-site Scripting (XSS)",
                "OWASP Top 10 2021 - A03 Injection",
                "Content Security Policy Level 3 - W3C"
            ],
            
            'insecure_direct_object_reference_(idor)': [
                "OWASP Top 10 2021 - A01 Broken Access Control",
                "CWE-639: Authorization Bypass Through User-Controlled Key",
                "OWASP Access Control Cheat Sheet",
                "NIST Cybersecurity Framework - Access Control"
            ],
            
            'missing_security_header': [
                "OWASP Secure Headers Project",
                "RFC 7034 - HTTP Header Field X-Frame-Options",
                "Content Security Policy Level 3 - W3C",
                "OWASP Application Security Verification Standard"
            ]
        }
    
    def get_prevention(self, vulnerability_type):
        """Get prevention methods for a specific vulnerability type"""
        return self.prevention_methods.get(vulnerability_type, "No specific prevention information available.")
    
    def get_references(self, vulnerability_type):
        """Get references for a specific vulnerability type"""
        return self.references.get(vulnerability_type, [])
    
    def get_vulnerability_info(self, vulnerability_type):
        """Get comprehensive information about a vulnerability"""
        return {
            'prevention': self.get_prevention(vulnerability_type),
            'references': self.get_references(vulnerability_type)
        }
