class VulnerabilityDatabase:
    """Database of vulnerability information, prevention techniques, and references"""

    def __init__(self):
        self.vulnerability_data = {
            'sql_injection': {
                'description': 'SQL injection occurs when user input is not properly sanitized before being used in SQL queries.',
                'prevention': [
                    'Use parameterized queries or prepared statements',
                    'Implement input validation and sanitization',
                    'Use stored procedures with proper parameter handling',
                    'Apply principle of least privilege for database accounts',
                    'Regularly update database software and apply security patches'
                ],
                'references': [
                    'https://owasp.org/www-community/attacks/SQL_Injection',
                    'https://portswigger.net/web-security/sql-injection',
                    'https://cwe.mitre.org/data/definitions/89.html'
                ],
                'severity': 'High',
                'cvss_score': 8.1
            },
            'xss': {
                'description': 'Cross-Site Scripting (XSS) allows attackers to inject malicious scripts into web pages viewed by other users.',
                'prevention': [
                    'Implement proper output encoding/escaping',
                    'Use Content Security Policy (CSP) headers',
                    'Validate and sanitize all user inputs',
                    'Use secure coding frameworks',
                    'Regular security testing and code reviews'
                ],
                'references': [
                    'https://owasp.org/www-community/attacks/xss/',
                    'https://portswigger.net/web-security/cross-site-scripting',
                    'https://cwe.mitre.org/data/definitions/79.html'
                ],
                'severity': 'Medium',
                'cvss_score': 6.1
            },
            'idor': {
                'description': 'Insecure Direct Object References occur when applications expose internal object references without proper authorization checks.',
                'prevention': [
                    'Implement proper access controls',
                    'Use indirect reference maps',
                    'Validate user permissions for each request',
                    'Apply session-based authorization',
                    'Use UUIDs instead of sequential IDs'
                ],
                'references': [
                    'https://owasp.org/www-community/Top_10/A01_2021-Broken_Access_Control/',
                    'https://portswigger.net/web-security/access-control/idor',
                    'https://cwe.mitre.org/data/definitions/639.html'
                ],
                'severity': 'High',
                'cvss_score': 7.5
            },
            'command_injection': {
                'description': 'Command injection vulnerabilities allow attackers to execute arbitrary commands on the host system.',
                'prevention': [
                    'Avoid system calls when possible',
                    'Use safe API alternatives',
                    'Implement strict input validation',
                    'Use whitelisting for allowed commands',
                    'Run applications with minimal privileges'
                ],
                'references': [
                    'https://owasp.org/www-community/attacks/Command_Injection',
                    'https://portswigger.net/web-security/os-command-injection',
                    'https://cwe.mitre.org/data/definitions/77.html'
                ],
                'severity': 'Critical',
                'cvss_score': 9.8
            },
            'security_headers': {
                'description': 'Missing security headers leave applications vulnerable to various client-side attacks.',
                'prevention': [
                    'Implement Content Security Policy (CSP)',
                    'Set X-Frame-Options header',
                    'Use X-Content-Type-Options: nosniff',
                    'Configure Strict-Transport-Security',
                    'Set proper Referrer-Policy'
                ],
                'references': [
                    'https://owasp.org/www-project-secure-headers/',
                    'https://securityheaders.com/',
                    'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers'
                ],
                'severity': 'Low',
                'cvss_score': 3.1
            }
        }

    def get_prevention(self, vulnerability_type: str) -> str:
        """Get prevention techniques for a vulnerability type"""
        vuln_data = self.vulnerability_data.get(vulnerability_type, {})
        prevention_list = vuln_data.get('prevention', [])
        return '\n'.join([f"â€¢ {item}" for item in prevention_list])

    def get_references(self, vulnerability_type: str) -> list:
        """Get references for a vulnerability type"""
        vuln_data = self.vulnerability_data.get(vulnerability_type, {})
        return vuln_data.get('references', [])

    def get_severity(self, vulnerability_type: str) -> str:
        """Get severity for a vulnerability type"""
        vuln_data = self.vulnerability_data.get(vulnerability_type, {})
        return vuln_data.get('severity', 'Medium')

    def get_cvss_score(self, vulnerability_type: str) -> float:
        """Get CVSS score for a vulnerability type"""
        vuln_data = self.vulnerability_data.get(vulnerability_type, {})
        return vuln_data.get('cvss_score', 5.0)

    def get_description(self, vulnerability_type: str) -> str:
        """Get description for a vulnerability type"""
        vuln_data = self.vulnerability_data.get(vulnerability_type, {})
        return vuln_data.get('description', 'No description available')

    def search_vulnerabilities(self, keyword: str) -> list:
        """Search for vulnerabilities containing a keyword"""
        results = []
        for vuln_type, data in self.vulnerability_data.items():
            if keyword.lower() in data.get('description', '').lower():
                results.append({
                    'type': vuln_type,
                    'description': data.get('description', ''),
                    'severity': data.get('severity', 'Medium')
                })
        return results

    def get_all_vulnerability_types(self) -> list:
        """Get all available vulnerability types"""
        return list(self.vulnerability_data.keys())